// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  registeredAt  DateTime  @default(now())
  resume        Resume[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id            String        @id @default(uuid())
  title         String
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  skills        Skill[]
  educations    Education[]
  workHistories WorkHistory[]
  projects      Project[]
  about         About?
}

model About {
  id        String  @id @default(uuid())
  jobTitle  String?
  summary   String? @db.Text
  name      String?
  avatarUrl String?
  email     String?
  phone     String?
  address   String?
  website   String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId  String  @unique
}

model Skill {
  id       String @id @default(uuid())
  name     String
  level    Int
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String
}

model Education {
  id        String   @id @default(uuid())
  school    String
  degree    String
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId  String
}

model WorkHistory {
  id          String   @id @default(uuid())
  jobTitle    String
  employer    String
  description String
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId    String
}

model Project {
  id          String @id @default(uuid())
  title       String
  url         String
  description String
  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId    String
}
